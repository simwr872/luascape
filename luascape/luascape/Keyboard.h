#pragma once
#include <Windows.h>
#include "StringHelp.h"
class Keyboard {
private:
	HWND client;
	const static int ascii[128];
	struct Key {
		char c;
		int repeat, scan, extended, reserved, context, previous, transition;
		
		Key(char _c) { c = _c; }
		bool Valid() { return !(0 > c || c > 127 || ascii[c] == 0x00); }

		int LParam(int code) {
			// LPARAM OF WM_KEYDOWN 
			// https://msdn.microsoft.com/en-us/library/ms646280(v=VS.85).aspx
			// |Transition|Previous |Context|Reserved|Extended|Scan    |Repeat count    |
			// |state     |key state|code   |        |key     |code    |                |
			// |0         |0        |0      |0000    |0       |00000000|0000000000000000|
			// |------------------------------------------------------------------------|
			// |31        |30       |29     |28-25   |24      |32-16   |15-0            |
			// Scan code is generated by hardware (keyboard) and is (usually) 
			// never used as a key identifier. Key scan code list;
			// https://msdn.microsoft.com/en-us/library/aa299374(v=vs.60).aspx
			repeat		= 1;
			scan		= ascii[c]	<< 16;
			extended	= 0			<< 24;
			reserved	= 0			<< 25;
			context		= 0			<< 29;
			if (code == WM_KEYUP) {
				// For key up the transition state, previous key state and
				// repeat count must be set to 1. Context code must be 0.
				previous	= 1	<< 30;
				transition	= 1 << 31;
			} else {
				// For keydown the transition state and context code must
				// be set to 0.
				previous	= 0 << 30;
				transition	= 0 << 31;
			}
			return repeat | scan | extended | reserved | context | previous | transition;
		}
		char WParam() {
			// wParam is simply the character code. Must always be
			// uppercase on key down & up.
			return StringHelp::upper(c);
		}
	};
public:
	bool PressKey(char c);
	Keyboard(HWND _client);
	Keyboard() {};
	~Keyboard() {};
};

